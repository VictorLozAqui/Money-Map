import { useEffect } from 'react';
import { collection, query, where, getDocs, addDoc, updateDoc, doc, Timestamp } from 'firebase/firestore';
import { db } from '../services/firebase';
import { useFamily } from '../contexts/FamilyContext';
import { RecurringExpense } from '../types';

export const useRecurringExpensesProcessor = () => {
  const { family } = useFamily();

  useEffect(() => {
    if (!family) return;

    const processRecurringExpenses = async () => {
      try {
        const currentMonth = new Date().toISOString().slice(0, 7); // "YYYY-MM"
        const currentDay = new Date().getDate();

        // Buscar gastos recorrentes ativos
        const q = query(
          collection(db, 'recurringExpenses'),
          where('familyId', '==', family.id),
          where('active', '==', true)
        );

        const snapshot = await getDocs(q);
        const recurringExpenses = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        })) as RecurringExpense[];

        for (const recurring of recurringExpenses) {
          // Verifica se já foi processado neste mês
          if (recurring.lastProcessedMonth === currentMonth) {
            continue;
          }

          // Verifica se já passou o dia do mês
          if (currentDay >= recurring.diaDoMes) {
            // Calcula a data correta (dia específico do mês atual)
            const targetDate = new Date();
            targetDate.setDate(recurring.diaDoMes);
            targetDate.setHours(12, 0, 0, 0); // Meio-dia para evitar problemas de timezone

            // Cria o gasto automático
            await addDoc(collection(db, 'expenses'), {
              familyId: family.id,
              nome: `${recurring.nome} (Automático)`,
              valor: recurring.valor,
              tipo: recurring.tipo,
              data: Timestamp.fromDate(targetDate),
              addedBy: recurring.createdBy,
              createdAt: Timestamp.now(),
              isAutoGenerated: true // Flag para identificar gastos automáticos
            });

            // Atualiza o último mês processado
            await updateDoc(doc(db, 'recurringExpenses', recurring.id), {
              lastProcessedMonth: currentMonth
            });

            console.log(`Gasto recorrente processado: ${recurring.nome}`);
          }
        }
      } catch (error) {
        console.error('Erro ao processar gastos recorrentes:', error);
      }
    };

    // Executa ao carregar e a cada 1 hora
    processRecurringExpenses();
    const interval = setInterval(processRecurringExpenses, 60 * 60 * 1000);

    return () => clearInterval(interval);
  }, [family]);
};

